name: CI/CD Pipeline

on:
  push:
    branches: [main, test]
jobs:
  create_branch_directory:
    runs-on: self-hosted
    steps:
      - name: Create the Branch Directory
        run: |
          mkdir -p ${{ github.ref_name }}

  build:
    runs-on: self-hosted
    needs: create_branch_directory
    outputs:
      cache-hit: ${{ steps.client_node_modules.outputs.cache-hit }}
    defaults:
      run:
        working-directory: ${{ github.ref_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: ${{ github.ref_name }}

      - name: Set Environment Variables
        id: set-env
        run: |
          echo "CACHE_KEY=${{ github.ref_name == 'main' && 'production' || 'testing' }}" >> $GITHUB_ENV

      - name: Cache client npm dependencies
        id: client_node_modules
        uses: actions/cache@v4
        with:
          path: ${{ github.ref_name }}/node_modules
          key: ${{ runner.os }}-npm-client-${{ env.CACHE_KEY }}-${{ hashFiles('**/package.json', '**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-client-${{ env.CACHE_KEY }}

      - name: Install client npm dependencies
        run: npm ci
        if: steps.client_node_modules.outputs.cache-hit != 'true'

      - name: Cache Next.js build artifacts
        uses: actions/cache@v4
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/${{ github.ref_name }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-${{ github.ref_name }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Build Client Application
        run: |
          # Clean up previous build outputs but keep the cache
          [ -d ".next" ] && find .next -type f -not -path '*/cache/*' -delete
          npm run build  # Build the client application
          pm2 restart pm2.config.cjs
          pm2 save
        env:
          NEXT_ENV: ${{ github.ref_name == 'main' && 'production' || 'testing' }}
          API_URL: ${{ github.ref_name == 'main' && secrets.API_URL || secrets.API_URL_TEST }}
          ANALYZE: ${{ github.ref_name == 'main' && secrets.ANALYZE || secrets.ANALYZE_TEST }}
          NEXT_JS_URL: ${{ github.ref_name == 'main' && secrets.NEXT_JS_URL || secrets.NEXT_JS_URL_TEST }}
          REVALIDATION_SECRET: ${{ github.ref_name == 'main' && secrets.REVALIDATION_SECRET || secrets.REVALIDATION_SECRET_TEST }}
          PM2_NAME: ${{ github.ref_name == 'main' && secrets.PM2_NAME || secrets.PM2_NAME_TEST }}
          CLIENT_PORT: ${{ github.ref_name == 'main' && secrets.CLIENT_PORT || secrets.CLIENT_PORT_TEST }}

  deploy:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Deploy Build
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            DEPLOY_DIR="/var/www"
          else
            sudo mkdir -p /var/www/test
            DEPLOY_DIR="/var/www/test"
          fi

          sudo cp -r ~/actions-runner/_work/500kalima/500kalima/${{ github.ref_name }}/.next $DEPLOY_DIR/

      - name: Restart Nginx Service
        run: |
          sudo systemctl reload nginx
          sudo systemctl restart nginx
